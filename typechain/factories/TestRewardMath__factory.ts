/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { TestRewardMath, TestRewardMathInterface } from '../TestRewardMath'

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'totalRewardUnclaimed',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'totalSecondsClaimedX128',
            type: 'uint160',
          },
          {
            internalType: 'uint256',
            name: 'startTime',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'endTime',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vestingPeriod',
            type: 'uint256',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'uint160',
            name: 'secondsPerLiquidityInsideInitialX128',
            type: 'uint160',
          },
          {
            internalType: 'uint160',
            name: 'secondsPerLiquidityInsideX128',
            type: 'uint160',
          },
          {
            internalType: 'uint32',
            name: 'secondsInsideInitial',
            type: 'uint32',
          },
          {
            internalType: 'uint32',
            name: 'secondsInside',
            type: 'uint32',
          },
          {
            internalType: 'uint256',
            name: 'currentTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct RewardMath.ComputeRewardAmountParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'computeRewardAmount',
    outputs: [
      {
        internalType: 'uint256',
        name: 'reward',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxReward',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'secondsInsideX128',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506103c5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ba6c1b0414610030575b600080fd5b61004361003e3660046102ac565b61005b565b60405161005293929190610368565b60405180910390f35b600080600061006984610076565b9196909550909350915050565b60008060008360400151846101400151101561008e57fe5b8360a001516fffffffffffffffffffffffffffffffff168460c001518560e00151030290506000846020015173ffffffffffffffffffffffffffffffffffffffff16608086604001516100ea8860600151896101400151610169565b03901b03905061011585600001518373ffffffffffffffffffffffffffffffffffffffff1683610182565b92508461010001518561012001510363ffffffff1685608001511161013c57829350610161565b84608001518561010001518661012001510363ffffffff1684028161015d57fe5b0493505b509193909250565b600081831015610179578161017b565b825b9392505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709868602925082811090839003039050806101d657600084116101cb57600080fd5b50829004905061017b565b8084116101e257600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b80356fffffffffffffffffffffffffffffffff8116811461026f57600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461026f57600080fd5b803563ffffffff8116811461026f57600080fd5b60006101608083850312156102bf578182fd5b6102c881610394565b9050823581526102da60208401610274565b602082015260408301356040820152606083013560608201526080830135608082015261030960a0840161024f565b60a082015261031a60c08401610274565b60c082015261032b60e08401610274565b60e082015261010061033e818501610298565b90820152610120610350848201610298565b90820152610140928301359281019290925250919050565b928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b60405181810167ffffffffffffffff811182821017156103b057fe5b60405291905056fea164736f6c6343000706000a'

export class TestRewardMath__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<TestRewardMath> {
    return super.deploy(overrides || {}) as Promise<TestRewardMath>
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): TestRewardMath {
    return super.attach(address) as TestRewardMath
  }
  connect(signer: Signer): TestRewardMath__factory {
    return super.connect(signer) as TestRewardMath__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): TestRewardMathInterface {
    return new utils.Interface(_abi) as TestRewardMathInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TestRewardMath {
    return new Contract(address, _abi, signerOrProvider) as TestRewardMath
  }
}
